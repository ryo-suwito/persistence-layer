//   Usage of user_schema.json

// The schema can be utilized in different ways:

//     MongoDB Schema Validation:
//         This schema can be used when setting up a MongoDB collection to enforce field types and structure.
//         For example, using MongoDBâ€™s collMod command or during collection creation to specify schema validation rules:

//         javascript

//     db.createCollection("users", {
//       validator: {
//         $jsonSchema: {
//           bsonType: "object",
//           required: ["name", "email", "password", "is_active"],
//           properties: {
//             id: {
//               bsonType: "int",
//               description: "must be an integer and is required"
//             },
//             name: {
//               bsonType: "string",
//               minLength: 1,
//               maxLength: 100,
//               description: "must be a string and is required"
//             },
//             email: {
//               bsonType: "string",
//               pattern: "^.+@.+\\..+$",
//               description: "must be a valid email"
//             },
//             password: {
//               bsonType: "string",
//               minLength: 8,
//               maxLength: 255,
//               description: "must be a string and is required"
//             },
//             is_active: {
//               bsonType: "bool",
//               description: "must be a boolean and is required"
//             },
//             created_at: {
//               bsonType: "date",
//               description: "must be a date"
//             },
//             updated_at: {
//               bsonType: "date",
//               description: "must be a date"
//             }
//           }
//         }
//       }
//     });

// Elasticsearch Index Mapping:

//     Use this schema as a reference to define the mapping for the User index in Elasticsearch. Mappings in Elasticsearch control how fields are indexed and queried.
//     Example Elasticsearch mapping derived from user_schema.json:

//     json

//     {
//       "mappings": {
//         "properties": {
//           "id": {
//             "type": "integer"
//           },
//           "name": {
//             "type": "text",
//             "fields": {
//               "keyword": {
//                 "type": "keyword",
//                 "ignore_above": 256
//               }
//             }
//           },
//           "email": {
//             "type": "keyword"
//           },
//           "password": {
//             "type": "text",
//             "index": false
//           },
//           "is_active": {
//             "type": "boolean"
//           },
//           "created_at": {
//             "type": "date",
//             "format": "strict_date_optional_time||epoch_millis"
//           },
//           "updated_at": {
//             "type": "date",
//             "format": "strict_date_optional_time||epoch_millis"
//           }
//         }
//       }
//     }

// Validation in Application Code:

//     This schema can be used with a JSON schema validation library in Go (e.g., github.com/xeipuuv/gojsonschema) to validate incoming requests before saving them to the database.
//     Example of validating a JSON object against the schema:

//     go

//         package utils

//         import (
//             "github.com/xeipuuv/gojsonschema"
//         )

//         func ValidateUserJSON(jsonData string) error {
//             schemaLoader := gojsonschema.NewReferenceLoader("file://./schemas/user_schema.json")
//             documentLoader := gojsonschema.NewStringLoader(jsonData)

//             result, err := gojsonschema.Validate(schemaLoader, documentLoader)
//             if err != nil {
//                 return err
//             }

//             if !result.Valid() {
//                 // Handle validation errors
//                 for _, desc := range result.Errors() {
//                     fmt.Printf("- %s\n", desc)
//                 }
//                 return fmt.Errorf("validation failed")
//             }
//             return nil
//         }

// Summary

// The user_schema.json file provides a standardized way to define and validate user data:

//     Data Integrity: Ensures that data saved to MongoDB or indexed in Elasticsearch conforms to the expected format.
//     Validation: Can be used for request validation in the application, ensuring data consistency before persisting.
//     Index Mapping: Serves as a blueprint for creating Elasticsearch mappings, enabling efficient indexing and searching of user data.